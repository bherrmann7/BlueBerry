name: Build and Release

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: write
  actions: read

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    # Create platform-specific builds for bb
    - name: Publish Windows x64 (Self-contained)
      if: matrix.os == 'windows-latest'
      run: dotnet publish src/bb -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -o ./publish/bb-win-x64

    - name: Publish macOS x64 (Self-contained)
      if: matrix.os == 'macos-latest'
      run: dotnet publish src/bb -c Release -r osx-x64 --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -o ./publish/bb-osx-x64

    - name: Publish macOS ARM64 (Self-contained)
      if: matrix.os == 'macos-latest'
      run: dotnet publish src/bb -c Release -r osx-arm64 --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -o ./publish/bb-osx-arm64

    - name: Publish Linux x64 (Self-contained)
      if: matrix.os == 'ubuntu-latest'
      run: dotnet publish src/bb -c Release -r linux-x64 --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -o ./publish/bb-linux-x64
      
    # Create zip files for release (only on main branch pushes)
    - name: Create Windows zip
      if: matrix.os == 'windows-latest' && github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd ./publish/bb-win-x64
        7z a ../../bb-windows-x64.zip *
        
    - name: Create macOS x64 zip
      if: matrix.os == 'macos-latest' && github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd ./publish/bb-osx-x64
        zip -r ../../bb-macos-x64.zip *
        
    - name: Create macOS ARM64 zip
      if: matrix.os == 'macos-latest' && github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd ./publish/bb-osx-arm64
        zip -r ../../bb-macos-arm64.zip *
        
    - name: Create Linux zip
      if: matrix.os == 'ubuntu-latest' && github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd ./publish/bb-linux-x64
        zip -r ../../bb-linux-x64.zip *
        
    # Upload artifacts for PR builds and regular CI
    - name: Upload Windows x64 build
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: bb-windows-x64
        path: ./publish/bb-win-x64/
        
    - name: Upload macOS x64 build
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: bb-macos-x64
        path: ./publish/bb-osx-x64/
        
    - name: Upload macOS ARM64 build
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: bb-macos-arm64
        path: ./publish/bb-osx-arm64/
        
    - name: Upload Linux x64 build
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: bb-linux-x64
        path: ./publish/bb-linux-x64/
        
    # Upload zip files as artifacts for the release job (only on main pushes)
    - name: Upload Windows zip
      if: matrix.os == 'windows-latest' && github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: bb-windows-x64-zip
        path: bb-windows-x64.zip
        
    - name: Upload macOS x64 zip
      if: matrix.os == 'macos-latest' && github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: bb-macos-x64-zip
        path: bb-macos-x64.zip
        
    - name: Upload macOS ARM64 zip
      if: matrix.os == 'macos-latest' && github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: bb-macos-arm64-zip
        path: bb-macos-arm64.zip
        
    - name: Upload Linux zip
      if: matrix.os == 'ubuntu-latest' && github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: bb-linux-x64-zip
        path: bb-linux-x64.zip

  # Create the actual GitHub release (only on main pushes)
  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get full history for better release notes
    
    # Download all the zip artifacts from the build job
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    # Debug: List downloaded artifacts
    - name: List artifacts
      run: find ./artifacts -type f -name "*.zip" | sort
        
    # Delete previous "latest" release to avoid accumulating releases
    - name: Delete previous latest release
      run: |
        gh release delete latest --yes || echo "No previous release to delete"
        git tag -d latest || echo "No local tag to delete"
        git push origin :refs/tags/latest || echo "No remote tag to delete"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true  # Don't fail if there's no previous release
        
    # Create a new "latest" release
    - name: Create Latest Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: latest
        name: "Latest Build"
        body: |
          ðŸš€ **Automatic build from latest commit**

          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}

          This release is automatically generated from the latest code on the main branch.
          Download the appropriate binary for your platform below.
        files: |
          ./artifacts/bb-windows-x64-zip/bb-windows-x64.zip
          ./artifacts/bb-macos-x64-zip/bb-macos-x64.zip
          ./artifacts/bb-macos-arm64-zip/bb-macos-arm64.zip
          ./artifacts/bb-linux-x64-zip/bb-linux-x64.zip
        draft: false
        prerelease: false
        make_latest: true
        token: ${{ secrets.GITHUB_TOKEN }}